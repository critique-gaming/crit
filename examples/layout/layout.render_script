local Layout = require "crit.layout"
local dispatcher = require "crit.dispatcher"

--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(
        xoffset, xoffset + projected_width,
        yoffset, yoffset + projected_height,
        near, far
    )
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
-- local function stretch_projection(near, far)
--     return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
-- end

local function configure_layout(self)
    if self.black_bars then
        local design_width = render.get_width()
        local design_height = render.get_height()
        local window_width = render.get_window_width()
        local window_height = render.get_window_height()

        local zoom = math.min(window_width / design_width, window_height / design_height)
        local viewport_width = design_width * zoom
        local viewport_height = design_height * zoom

        Layout.set_metrics({
            window_width = window_width,
            window_height = window_height,
            viewport_width = viewport_width,
            viewport_height = viewport_height,
            projection_left = 0,
            projection_bottom = 0,
            projection_right = design_width,
            projection_top = design_height,
        })
    else
        -- Ideally, we should pass in the 4 left/right/top/bottom values used in
        -- vmath.matrix4_orthographic to calculate the projection matrix (like the above example),
        -- but, for convenience, passing the whole projection matrix also works
        -- and Layout will derive them (with some tiny mathematical errors)
        Layout.set_metrics({
            window_width = render.get_window_width(),
            window_height = render.get_window_height(),
            projection = fixed_fit_projection(-1, 1),
        })
    end
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    self.black_bars = false
    configure_layout(self)
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({
        [render.BUFFER_COLOR_BIT] = self.clear_color,
        [render.BUFFER_DEPTH_BIT] = 1,
        [render.BUFFER_STENCIL_BIT] = 0,
    })

    -- Setting the viewport from Layout
    render.set_viewport(
        Layout.viewport_origin_x, Layout.viewport_origin_y,
        Layout.viewport_width, Layout.viewport_height
    )
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    -- We just take the projection straight from Layout
    -- It's cached, so it won't be recalculated each frame
    render.set_projection(Layout.get_projection_matrix())

    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    -- render GUI
    --
    render.set_view(vmath.matrix4())
    render.set_projection(Layout.get_gui_projection_matrix()) -- We do the same for GUI projection

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    elseif message_id == hash("window_resized") then
        configure_layout(self)
        dispatcher.dispatch("window_change_size")
    elseif message_id == hash("toggle_black_bars") then
        self.black_bars = not self.black_bars
        configure_layout(self)
        dispatcher.dispatch("window_change_size")
    end
end
